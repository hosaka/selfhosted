version: "3"

x-logging: &logging
  driver: json-file
  options:
    max-size: 100m
    max-file: "3"
    tag: '{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}'

x-hotio: &environment-hotio
  environment:
    - PUID=${MEDIA_PUID}
    - PGID=${MEDIA_PGID}
    - UMASK=${MEDIA_UMASK}
    - TZ=${TIMEZONE}

networks:
  proxy:
  cloudflared:
  qbit:
  immich:
  paperless:
  monitor:

volumes:
  caddy-data:
  caddy-config:

  jellyfin-config:
  jellyfin-cache:
  radarr-config:
  sonarr-config:
  lidarr-config:
  navidrome-data:
  prowlarr-config:
  recyclarr-config:
  jellyseerr-config:
  sabnzbd-config:
  qbit-config:
  qbitmanage-config:

  media-root:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: ${MEDIA_ROOT_PATH}
  media-collection:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: ${MEDIA_COLLECTION_PATH}
  media-collection-music:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: ${MEDIA_COLLECTION_MUSIC_PATH}
  # media-collection-youtube:
  #   driver: local
  #   driver_opts:
  #     o: bind
  #     type: none
  #     device: ${MEDIA_COLLECTION_YOUTUBE_PATH}
  downloads-torrent:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: ${MEDIA_DOWNLOADS_TORRENT_PATH}
  downloads-usenet:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: ${MEDIA_DOWNLOADS_USENET_PATH}

  immich-model-cache:
  immich-redis-data:
  immich-database-data:
  immich-typesense-data:
  immich-upload:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: ${IMMICH_UPLOAD_LOCATION}

  paperless-redis-data:
  paperless-data:
  paperless-media:
  paperless-consume:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: ${PAPERLESS_CONSUME_PATH}
  paperless-export:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: ${PAPERLESS_EXPORT_PATH}

  vaultwarden-data:

  gotify-data:
  diun-data:
  grafana-data:
  grafana-config:
  prometheus-data:

services:
  caddy:
    image: caddy:local
    build:
      context: ./caddy
      dockerfile: Containerfile
      args:
        - CADDY_VERSION=2.6.4
    environment:
      - PROXY_CF_API_EMAIL=${PROXY_CF_API_EMAIL}
      - PROXY_CF_API_TOKEN=${PROXY_CF_API_TOKEN}
      - PROXY_PUBLIC_DOMAIN=${PROXY_PUBLIC_DOMAIN}
      - PROXY_PRIVATE_DOMAIN=${PROXY_PRIVATE_DOMAIN}
      - CADDY_INGRESS_NETWORKS=proxy
    logging: *logging
    networks:
      - proxy
      - cloudflared
    ports:
      - 80:80
      - 443:443/tcp
      - 443:443/udp
    restart: unless-stopped
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - caddy-data:/data
      - caddy-config:/config
      - ./caddy/Caddyfile:/etc/caddy/Caddyfile

  blocky:
    image: docker.io/spx01/blocky:v0.21
    logging: *logging
    networks:
      - monitor
    ports:
      - 53:53/tcp
      - 53:53/udp
    restart: unless-stopped
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ./blocky/config.yml:/app/config.yml

  cloudflared:
    image: docker.io/cloudflare/cloudflared:2023.5.1
    command: tunnel --no-autoupdate --metrics 0.0.0.0:4506 run --token ${PROXY_CF_TUNNEL_TOKEN}
    extra_hosts:
      - host.docker.internal:host-gateway
    logging: *logging
    networks:
      - cloudflared
      - monitor
    restart: unless-stopped
    volumes:
      - /etc/localtime:/etc/localtime:ro

  jellyfin:
    image: docker.io/hotio/jellyfin:release-10.8.10-1
    devices:
      - ${MEDIA_JELLYFIN_CARD}:/dev/dri/card0
      - ${MEDIA_JELLYFIN_RENDER}:/dev/dri/renderD128
    <<: *environment-hotio
    group_add:
      - ${MEDIA_JELLYFIN_VIDEO_GROUP}
    logging: *logging
    networks:
      - proxy
    restart: unless-stopped
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - media-collection:/data/media/collection
      - jellyfin-config:/config
      - jellyfin-cache:/cache

  jellyseerr:
    image: docker.io/fallenbagel/jellyseerr:1.5.0
    <<: *environment-hotio
    logging: *logging
    networks:
      - proxy
      - monitor
    restart: unless-stopped
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - jellyseerr-config:/app/config

  radarr:
    image: docker.io/hotio/radarr:release-4.5.2.7388
    <<: *environment-hotio
    logging: *logging
    networks:
      - proxy
    restart: unless-stopped
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - media-root:/data/media
      - radarr-config:/config

  sonarr:
    image: docker.io/hotio/sonarr:v4-4.0.0.534
    <<: *environment-hotio
    logging: *logging
    networks:
      - proxy
    restart: unless-stopped
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - media-root:/data/media
      - sonarr-config:/config

  prowlarr:
    image: docker.io/hotio/prowlarr:release-1.4.1.3258
    <<: *environment-hotio
    logging: *logging
    networks:
      - proxy
    restart: unless-stopped
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - media-root:/data/media
      - prowlarr-config:/config

  recyclarr:
    image: docker.io/recyclarr/recyclarr:4.4.1
    environment:
      - TZ=${TIMEZONE}
    logging: *logging
    networks:
      - proxy
    restart: unless-stopped
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - recyclarr-config:/config
      - ./recyclarr/recyclarr.yml:/config/recyclarr.yml

  navidrome:
    image: docker.io/deluan/navidrome:0.49.3
    environment:
      - ND_ENABLETRANSCODINGCONFIG=false
    logging: *logging
    networks:
      - proxy
    restart: unless-stopped
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - navidrome-data:/data
      - media-collection-music:/music:ro

  lidarr:
    image: docker.io/hotio/lidarr:release-1.1.4.3027
    <<: *environment-hotio
    logging: *logging
    networks:
      - proxy
    restart: unless-stopped
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - media-root:/data/media
      - lidarr-config:/config

  sabnzbd:
    image: docker.io/hotio/sabnzbd:release-4.0.1
    <<: *environment-hotio
    logging: *logging
    networks:
      - proxy
    restart: unless-stopped
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - sabnzbd-config:/config
      - downloads-usenet:/data/media/downloads/usenet

  qbit:
    image: docker.io/hotio/qbittorrent:release
    cap_add:
      - NET_ADMIN
    environment:
      - PUID=${MEDIA_PUID}
      - PGID=${MEDIA_PGID}
      - UMASK=${MEDIA_UMASK}
      - TZ=${TIMEZONE}
      - VPN_ENABLED=${MEDIA_TORRENT_VPN_ENABLED}
      - VPN_IP_CHECK_DELAY=${MEDIA_TORRENT_VPN_IP_CHECK_DELAY}
      - VPN_IP_CHECK_EXIT=${MEDIA_TORRENT_VPN_IP_CHECK_EXIT}
      - VPN_LAN_NETWORK=${MEDIA_TORRENT_VPN_LAN_NETWORK}
    logging: *logging
    networks:
      - proxy
      - qbit
    restart: unless-stopped
    sysctls:
      - net.ipv4.conf.all.src_valid_mark=1
      - net.ipv6.conf.all.disable_ipv6=0
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - qbit-config:/config
      - ./qbittorrent/wg0.conf:/config/wireguard/wg0.conf:ro
      - downloads-torrent:/data/media/downloads/torrent

  qbitmanage:
    image: docker.io/hotio/qbitmanage:release
    <<: *environment-hotio
    logging: *logging
    networks:
      - proxy
      - qbit
    restart: unless-stopped
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - qbitmanage-config:/config
      - ./qbittorrent/qbitmanage.yml:/config/config.yml
      - downloads-torrent:/data/media/downloads/torrent

  immich-server:
    image: docker.io/altran1502/immich-server:release
    depends_on:
      - immich-redis
      - immich-database
      - immich-typesense
    entrypoint: ["/bin/sh", "./start-server.sh"]
    environment:
      - NODE_ENV=production
      - DB_HOSTNAME=immich-database
      - DB_USERNAME=${IMMICH_DB_USERNAME}
      - DB_PASSWORD=${IMMICH_DB_PASSWORD}
      - DB_DATABASE_NAME=${IMMICH_DB_DATABASE_NAME}
      - REDIS_HOSTNAME=immich-redis
      - TYPESENSE_HOST=immich-typesense
      - TYPESENSE_API_KEY=${IMMICH_TYPESENSE_API_KEY}
      - JWT_SECRET=${IMMICH_JWT_SECRET}
      - LOG_LEVEL=${IMMICH_LOG_LEVEL}
      - TZ=${TIMEZONE}
    logging: *logging
    networks:
      - immich
    restart: unless-stopped
    volumes:
      - immich-upload:/usr/src/app/upload

  immich-microservices:
    image: docker.io/altran1502/immich-server:release
    depends_on:
      - immich-redis
      - immich-database
      - immich-typesense
    entrypoint: ["/bin/sh", "./start-microservices.sh"]
    environment:
      - NODE_ENV=production
      - DB_HOSTNAME=immich-database
      - DB_USERNAME=${IMMICH_DB_USERNAME}
      - DB_PASSWORD=${IMMICH_DB_PASSWORD}
      - DB_DATABASE_NAME=${IMMICH_DB_DATABASE_NAME}
      - REDIS_HOSTNAME=immich-redis
      - TYPESENSE_HOST=immich-typesense
      - TYPESENSE_API_KEY=${IMMICH_TYPESENSE_API_KEY}
      - JWT_SECRET=${IMMICH_JWT_SECRET}
      - LOG_LEVEL=${IMMICH_LOG_LEVEL}
      - TZ=${TIMEZONE}
    logging: *logging
    networks:
      - immich
    restart: unless-stopped
    volumes:
      - immich-upload:/usr/src/app/upload

  immich-machine-learning:
    image: docker.io/altran1502/immich-machine-learning:release
    environment:
      - NODE_ENV=production
    logging: *logging
    networks:
      - immich
    restart: unless-stopped
    volumes:
      - immich-upload:/usr/src/app/upload
      - immich-model-cache:/cache

  immich-web:
    image: docker.io/altran1502/immich-web:release
    entrypoint: ["/bin/sh", "./entrypoint.sh"]
    logging: *logging
    networks:
      - immich
    restart: unless-stopped

  immich-redis:
    image: docker.io/redis:6.2
    logging: *logging
    networks:
      - immich
    restart: unless-stopped
    volumes:
      - immich-redis-data:/data

  immich-database:
    image: docker.io/postgres:14
    environment:
      - POSTGRES_USER=${IMMICH_DB_USERNAME}
      - POSTGRES_PASSWORD=${IMMICH_DB_PASSWORD}
      - POSTGRES_DB=${IMMICH_DB_DATABASE_NAME}
    logging: *logging
    networks:
      - immich
    restart: unless-stopped
    volumes:
      - immich-database-data:/var/lib/postgresql/data

  immich-typesense:
    image: docker.io/typesense/typesense:0.24.0
    # command:
    #   - '--data-dir=/data'
    #   - '--api-key=${IMMICH_TYPESENSE_API_KEY}'
    environment:
      - TYPESENSE_API_KEY=${IMMICH_TYPESENSE_API_KEY}
      - TYPESENSE_DATA_DIR=/data
    logging: *logging
    networks:
      - immich
    restart: unless-stopped
    volumes:
      - immich-typesense-data:/data

  immich:
    image: docker.io/altran1502/immich-proxy:release
    depends_on:
      - immich-server
    logging: *logging
    networks:
      - proxy
      - immich
    restart: unless-stopped

  paperless-redis:
    image: docker.io/redis:7
    logging: *logging
    networks:
      - paperless
    restart: unless-stopped
    volumes:
      - paperless-redis-data:/data

  paperless-gotenberg:
    image: docker.io/gotenberg/gotenberg:7.8
    command:
      - "gotenberg"
      - "--chromium-disable-javascript=true"
      - "--chromium-allow-list=file:///tmp/.*"
    logging: *logging
    networks:
      - paperless
    restart: unless-stopped

  paperless-tika:
    image: docker.io/apache/tika:2.7.0.0
    logging: *logging
    networks:
      - paperless
    restart: unless-stopped

  paperless:
    image: docker.io/paperlessngx/paperless-ngx:1.14.5
    depends_on:
      - paperless-redis
      - paperless-gotenberg
      - paperless-tika
    environment:
      - PAPERLESS_URL=https://paperless.${PROXY_PRIVATE_DOMAIN}
      - PAPERLESS_ADMIN_USER=${PAPERLESS_ADMIN_USER}
      - PAPERLESS_ADMIN_PASSWORD=${PAPERLESS_ADMIN_PASSWORD}
      - PAPERLESS_ALLOWED_HOSTS=paperless.${PROXY_PUBLIC_DOMAIN}
      - PAPERLESS_CSRF_TRUSTED_ORIGINS=https://paperless.${PROXY_PUBLIC_DOMAIN}
      - PAPERLESS_SECRET_KEY=${PAPERLESS_SECRET_KEY}
      - PAPERLESS_REDIS=redis://paperless-redis:6379
      - PAPERLESS_TIKA_ENABLED=true
      - PAPERLESS_TIKA_ENDPOINT=http://paperless-tika:9998
      - PAPERLESS_TIKA_GOTENBERG_ENDPOINT=http://paperless-gotenberg:3000
      - PAPERLESS_TIME_ZONE=${TIMEZONE}
      - PAPERLESS_OCR_LANGUAGE=${PAPERLESS_OCR_LANGUAGE}
      - PAPERLESS_OCR_LANGUAGES=${PAPERLESS_OCR_LANGUAGES}
      - USERMAP_UID=${MEDIA_PUID}
      - USERMAP_GID=${MEDIA_PGID}
      - TZ=${TIMEZONE}
    healthcheck:
      test: ["CMD", "curl", "-fs", "-S", "--max-time", "2", "http://localhost:8000"]
      interval: 30s
      timeout: 10s
      retries: 5
    logging: *logging
    networks:
      - proxy
      - paperless
    restart: unless-stopped
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - paperless-data:/usr/src/paperless/data
      - paperless-media:/usr/src/paperless/media
      - paperless-consume:/usr/src/paperless/consume
      - paperless-export:/usr/src/paperless/export

  vaultwarden:
    image: docker.io/vaultwarden/server:1.28.0-alpine
    environment:
      - ADMIN_TOKEN=${VAULTWARDEN_ADMIN_TOKEN}
      - DOMAIN=https://vaultwarden.${PROXY_PUBLIC_DOMAIN}
      - INVITATIONS_ALLOWED=false
      - ORG_CREATION_USERS=none
      - PASSWORD_HINTS_ALLOWED=false
      - SHOW_PASSWORD_HINT=false
      - SIGNUPS_ALLOWED=false
      - SMTP_FROM=${VAULTWARDEN_SMTP_FROM}
      - SMTP_HOST=${VAULTWARDEN_SMTP_HOST}
      - SMTP_PASSWORD=${VAULTWARDEN_SMTP_PASSWORD}
      - SMTP_PORT=${VAULTWARDEN_SMTP_PORT}
      - SMTP_SECURITY=${VAULTWARDEN_SMTP_SECURITY}
      - SMTP_USERNAME=${VAULTWARDEN_SMTP_USERNAME}
      - TZ=${TIMEZONE}
      - WEBSOCKET_ENABLED=true
      - YUBICO_CLIENT_ID=${VAULTWARDEN_YUBICO_CLIENT_ID}
      - YUBICO_SECRET_KEY=${VAULTWARDEN_YUBICO_SECRET_KEY}
    logging: *logging
    networks:
      - proxy
    restart: unless-stopped
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - vaultwarden-data:/data

  gotify:
    image: docker.io/gotify/server:2.2.4
    environment:
      - TZ=${TIMEZONE}
    logging: *logging
    networks:
      - proxy
      - monitor
    restart: unless-stopped
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - gotify-data:/app/data

  diun:
    image: docker.io/crazymax/diun:4.24
    command: serve
    environment:
      - TZ=${TIMEZONE}
      - DIUN_NOTIF_GOTIFY_ENDPOINT=http://gotify
      - DIUN_NOTIF_GOTIFY_TOKEN=${MONITOR_DIUN_GOTIFY_TOKEN}
    logging: *logging
    networks:
      - monitor
    restart: unless-stopped
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - diun-data:/data
      - ./diun/diun.yml:/diun.yml:ro
      - ./diun/config.yml:/config.yml:ro

  grafana:
    image: docker.io/grafana/grafana:9.5.2
    logging: *logging
    environment:
      - TZ=${TIMEZONE}
      - GF_SECURITY_ADMIN_USER=${MONITOR_GRAFANA_SECURITY_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${MONITOR_GRAFANA_SECURITY_ADMIN_PASSWORD}
    networks:
      - proxy
      - monitor
    restart: unless-stopped
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - grafana-data:/var/lib/grafana
      - grafana-config:/etc/grafana
      - ./grafana/dashboard.yml:/etc/grafana/provisioning/dashboards/dashboard.yml
      - ./grafana/datasource.yml:/etc/grafana/provisioning/datasources/datasource.yml

  prometheus:
    image: docker.io/prom/prometheus:v2.44.0
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.templates=/usr/share/prometheus/consoles"
      - "--web.console.libraries=/usr/share/prometheus/console_libraries"
    environment:
      - TZ=${TIMEZONE}
    logging: *logging
    networks:
      - monitor
    restart: unless-stopped
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - prometheus-data:/prometheus
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
